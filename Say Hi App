import os
import openai

openai.api_key = os.getenv("OPENAI_API_KEY")

response = openai.Completion.create(
  model="text-davinci-003",
  prompt="Write an app that uses the bluetooth function to identify other people with the same app that would like to talk to you within the app's range. The app will identify other app users within range. It will then let you like that other person via their photo and if they also like you, then the app will message the two people with a one line message, such as \"come and say hi\" or \"let's chat\". \n\nWrite the code for an app. The app will connect to other users’ phones via Bluetooth. It will search for other users with the same app installed in their phones and within the same range. The app will then display the user’s profile picture and allow users to like each other. If both users like each other, the app will message them a one-line message such as “come and say hi” or “let’s chat”. From there, the app will allow users to chat in the app or start a call or video call. \n\nThe app will also allow users to set preferences such as age range, gender, and location. This will help users find people with similar interests and that are in their local area. The app will also have an option to block or report users, to ensure a safe and secure experience. \n\n\n//Bluetooth Setup\nimport CoreBluetooth\nimport UIKit\n\n//Declare BluetoothManager Class\nclass BluetoothManager: NSObject, CBCentralManagerDelegate, CBPeripheralDelegate {\n\n    //Declare Variables\n    var centralManager: CBCentralManager!\n    var discoveredPeripheral: CBPeripheral?\n    var discoveredPeripherals = [CBPeripheral]()\n    \n    //Initialize BluetoothManager\n    override init() {\n        super.init()\n        centralManager = CBCentralManager(delegate: self, queue: nil)\n    }\n    \n    // Begin Scanning\n    func startScanning() {\n        centralManager.scanForPeripherals(withServices: nil, options: nil)\n    }\n    \n    // Stop Scanning\n    func stopScanning() {\n        centralManager.stopScan()\n    }\n\n    // CBCentralManager Delegate Methods\n    func centralManagerDidUpdateState(_ central: CBCentralManager) {\n        if central.state == .poweredOn {\n            startScanning()\n        }\n    }\n    \n    func centralManager(_ central: CBCentralManager, didDiscover peripheral: CBPeripheral, advertisementData: [String : Any], rssi RSSI: NSNumber) {\n        discoveredPeripherals.append(peripheral)\n        \n        //Connect To Discovered Peripheral\n        let connectionOptions = [CBConnectionPeripheralOptionNotifyOnDisconnectionKey:true, CBConnectionPeripheralOptionNotifyOnNotificationKey:true]\n        central.connect(peripheral, options: connectionOptions)\n    }\n    \n    func centralManager(_ central: CBCentralManager, didConnect peripheral: CBPeripheral) {\n        peripheral.delegate = self\n        peripheral.discoverServices(nil)\n    }\n    \n    // CBPeripheral Delegate Methods\n    func peripheral(_ peripheral: CBPeripheral, didDiscoverServices error: Error?) {\n        if let services = peripheral.services {\n            for service in services {\n                peripheral.discoverCharacteristics(nil, for: service)\n            }\n        }\n    }\n    \n    func peripheral(_ peripheral: CBPeripheral, didDiscoverCharacteristicsFor service: CBService, error: Error?) {\n        if let characteristics = service.characteristics {\n            for characteristic in characteristics {\n                if characteristic.properties.contains(.read) {\n                    peripheral.readValue(for: characteristic)\n                }\n                if characteristic.properties.contains(.notify) {\n                    peripheral.setNotifyValue(true, for: characteristic)\n                }\n            }\n        }\n    }\n    \n    func peripheral(_ peripheral: CBPeripheral, didUpdateValueFor characteristic: CBCharacteristic, error: Error?) {\n        //Handle Data\n    }\n \n    //Function For Liking\n    func likeUser(otherUser: CBPeripheral) {\n        // Code for liking other user\n    }\n    \n    //Function For Chatting\n    func chatWithUser(otherUser: CBPeripheral) {\n        // Code for initiating a chat with other user\n    }\n    \n    //Function For Setting Preferences\n    func setPreferences(ageRange: Int, gender: String, location: String) {\n        // Code for setting preferences\n    }\n    \n    //Function For Blocking/Reporting\n    func blockOrReportUser(otherUser: CBPeripheral) {\n        // Code for blocking/reporting other user\n    }\n}\nGive me a full breakdown on how to turn this into an iPhone app",
  temperature=0.8,
  max_tokens=2655,
  top_p=1,
  frequency_penalty=0,
  presence_penalty=0
)
